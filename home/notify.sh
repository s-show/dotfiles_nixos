#!/usr/bin/env zsh

# wsl-notify-send.exe „ÅÆ„Éë„Çπ
# ÂÑ™ÂÖàÈ†Ü‰ΩçÔºö
# 1. Áí∞Â¢ÉÂ§âÊï∞ WSL_NOTIFY_SEND_EXEÔºàHome Manager„ÅßË®≠ÂÆöÔºâ
# 2. ÂãïÁöÑ„Å´Ê§úÁ¥¢
WSL_NOTIFY_SEND_EXE="${WSL_NOTIFY_SEND_EXE:-}"

# wsl-notify-send.exe „ÅÆÂÆüÈöõ„ÅÆ„Éë„Çπ„ÇíË¶ã„Å§„Åë„Çã
find_wsl_notify_send() {
    # Nix store „Åã„Çâ wsl-notify-send.exe „ÇíÊé¢„Åô
    local found_exe=$(find /nix/store -maxdepth 3 -name "wsl-notify-send.exe" -type f -executable 2>/dev/null | head -1)
    if [[ -n "$found_exe" ]] && [[ -x "$found_exe" ]]; then
        echo "$found_exe"
        return 0
    fi
    
    return 1
}

# Ëµ∑ÂãïÊôÇ„Å´ wsl-notify-send „ÅÆ„Éë„Çπ„ÇíË®≠ÂÆöÔºàÁí∞Â¢ÉÂ§âÊï∞„Åå„Å™„ÅÑÂ†¥Âêà„ÅÆ„ÅøÔºâ
if [[ -z "$WSL_NOTIFY_SEND_EXE" ]] || [[ ! -x "$WSL_NOTIFY_SEND_EXE" ]]; then
    WSL_NOTIFY_SEND_EXE=$(find_wsl_notify_send)
fi

# notify-send „ÅåÂà©Áî®ÂèØËÉΩ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
check_notify_send() {
    if [[ -n "$WSL_NOTIFY_SEND_EXE" ]] && [[ -x "$WSL_NOTIFY_SEND_EXE" ]]; then
        return 0
    else
        echo "Error: wsl-notify-send.exe not found at $WSL_NOTIFY_SEND_EXE" >&2
        echo "Trying to find it..." >&2
        WSL_NOTIFY_SEND_EXE=$(find_wsl_notify_send)
        if [[ -n "$WSL_NOTIFY_SEND_EXE" ]]; then
            echo "Found at: $WSL_NOTIFY_SEND_EXE" >&2
            return 0
        else
            echo "Could not find wsl-notify-send.exe in /nix/store" >&2
            return 1
        fi
    fi
}

# ÈÄöÁü•„ÇíÈÄÅ„ÇãÊ±éÁî®Èñ¢Êï∞Ôºàwsl-notify-send.exe „ÇíÁõ¥Êé•‰ΩøÁî®Ôºâ
notify() {
    local title="${1:-ÈÄöÁü•}"
    local message="${2:-}"
    
    if ! check_notify_send; then
        return 1
    fi
    
    # „Éá„Éê„ÉÉ„Ç∞Âá∫ÂäõÔºàÂøÖË¶Å„Å´Âøú„Åò„Å¶ÊúâÂäπÂåñÔºâ
    if [[ "${NOTIFY_DEBUG:-}" == "true" ]]; then
        echo "[DEBUG] WSL_NOTIFY_SEND_EXE: $WSL_NOTIFY_SEND_EXE" >&2
        echo "[DEBUG] Title: $title" >&2
        echo "[DEBUG] Message: $message" >&2
    fi
    
    # Êó•Êú¨Ë™û„ÇíÂê´„ÇÄÂ†¥Âêà„ÅÆÂØæÁ≠ñ
    # ÊñπÊ≥ï1: Áí∞Â¢ÉÂ§âÊï∞„ÅßUTF-8„ÇíÊòéÁ§∫
    local notification_text
    if [[ -n "$message" ]]; then
        notification_text=$(printf '%s\n%s' "$title" "$message")
    else
        notification_text="$title"
    fi
    
    # UTF-8„Ç®„É≥„Ç≥„Éº„Éá„Ç£„É≥„Ç∞„ÇíÂº∑Âà∂„Åó„Å¶ÂÆüË°å
    LC_ALL=C.UTF-8 "$WSL_NOTIFY_SEND_EXE" --category "${WSL_DISTRO_NAME:-NixOS}" "$notification_text"
}

# Êó•Êú¨Ë™ûÂØæÂøúÁâà„ÅÆÈÄöÁü•Èñ¢Êï∞Ôºà„Ç®„Çπ„Ç±„Éº„ÉóÂá¶ÁêÜ„ÅÇ„ÇäÔºâ
notify_ja() {
    local title="${1:-ÈÄöÁü•}"
    local message="${2:-}"
    
    if ! check_notify_send; then
        return 1
    fi
    
    # Êó•Êú¨Ë™û„Çí„Ç®„Çπ„Ç±„Éº„Éó„Åæ„Åü„ÅØËã±Ë™û„Å´ÁΩÆÊèõ
    local safe_text
    if [[ -n "$message" ]]; then
        # ÊîπË°å„ÅßÂå∫Âàá„Çã„Åå„ÄÅÊó•Êú¨Ë™û„ÅØÈÅø„Åë„Çã
        safe_text="$title - $message"
    else
        safe_text="$title"
    fi
    
    "$WSL_NOTIFY_SEND_EXE" --category "${WSL_DISTRO_NAME:-NixOS}" "$safe_text"
}

# ÁµµÊñáÂ≠ó„Çí‰Ωø„Å£„ÅüÈÄöÁü•ÔºàÊó•Êú¨Ë™û„ÇíÈÅø„Åë„ÇãÔºâ
notify_emoji() {
    local type="${1:-info}"
    local title="${2:-Notification}"
    local message="${3:-}"
    
    local emoji
    case "$type" in
        success) emoji="‚úÖ" ;;
        error)   emoji="‚ùå" ;;
        warning) emoji="‚ö†Ô∏è" ;;
        info)    emoji="‚ÑπÔ∏è" ;;
        *)       emoji="üì¢" ;;
    esac
    
    if [[ -n "$message" ]]; then
        notify "$emoji $title" "$message"
    else
        notify "$emoji $title"
    fi
}

# „Çø„Ç§„Éà„É´„Å®„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂà•„ÄÖ„Å´Êâ±„ÅÜÈÄöÁü•
notify_structured() {
    local title="${1:-ÈÄöÁü•}"
    local message="${2:-}"
    
    if ! check_notify_send; then
        return 1
    fi
    
    # ÊîπË°å„ÅßÂå∫Âàá„Å£„Å¶ÈÄÅ‰ø°
    if [[ -n "$message" ]]; then
        notify-send "$(printf '%s\n%s' "$title" "$message")"
    else
        notify-send "$title"
    fi
}

# „Ç¢„Ç§„Ç≥„É≥‰ªò„ÅçÈÄöÁü•Ôºàwsl-notify-send„ÅØ --icon „Ç™„Éó„Ç∑„Éß„É≥„Çí„Çµ„Éù„Éº„ÉàÔºâ
notify_with_icon() {
    local title="${1:-ÈÄöÁü•}"
    local message="${2:-}"
    local icon="${3:-}"
    
    if ! check_notify_send; then
        return 1
    fi
    
    # Áõ¥Êé• wsl-notify-send.exe „ÇíÂëº„Å≥Âá∫„ÅôÂøÖË¶Å„Åå„ÅÇ„ÇãÂ†¥Âêà
    local wsl_notify_exe=$(which notify-send | grep -oP '/nix/store/[^/]+/bin/wsl-notify-send\.exe')
    
    if [[ -n "$icon" ]] && [[ -f "$icon" ]] && [[ -n "$wsl_notify_exe" ]]; then
        local win_icon=$(wslpath -w "$icon" 2>/dev/null)
        if [[ -n "$win_icon" ]]; then
            "$wsl_notify_exe" --icon "$win_icon" "$title: $message"
        else
            notify "$title" "$message"
        fi
    else
        notify "$title" "$message"
    fi
}

# „Ç´„ÉÜ„Ç¥„É™Âà•ÈÄöÁü•ÔºàËã±Ë™ûÁâàÔºâ
notify_info() {
    notify_emoji "info" "${1:-Info}" "$2"
}

notify_success() {
    notify_emoji "success" "${1:-Success}" "$2"
}

notify_warning() {
    notify_emoji "warning" "${1:-Warning}" "$2"
}

notify_error() {
    notify_emoji "error" "${1:-Error}" "$2"
}

# Êó•Êú¨Ë™û„Çø„Ç§„Éà„É´„ÇíËã±Ë™û„Å´Â§âÊèõ„Åô„ÇãÈñ¢Êï∞
translate_title() {
    local title="$1"
    case "$title" in
        "„Éì„É´„ÉâÂÆå‰∫Ü"|"„Éì„É´„ÉâÊàêÂäü") echo "Build Complete" ;;
        "„Éì„É´„ÉâÂ§±Êïó") echo "Build Failed" ;;
        "„ÉÜ„Çπ„ÉàÂÆå‰∫Ü"|"„ÉÜ„Çπ„ÉàÊàêÂäü") echo "Test Complete" ;;
        "„ÉÜ„Çπ„ÉàÂ§±Êïó") echo "Test Failed" ;;
        "„Ç®„É©„Éº"|"„Ç®„É©„ÉºÁô∫Áîü") echo "Error" ;;
        "Ë≠¶Âëä") echo "Warning" ;;
        "ÊàêÂäü"|"ÂÆå‰∫Ü") echo "Success" ;;
        "ÊÉÖÂ†±"|"„ÅäÁü•„Çâ„Åõ") echo "Info" ;;
        "„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂÆå‰∫Ü") echo "Download Complete" ;;
        "„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü") echo "Upload Complete" ;;
        "„Éá„Éó„É≠„Ç§ÂÆå‰∫Ü") echo "Deploy Complete" ;;
        "Âá¶ÁêÜÂÆå‰∫Ü") echo "Process Complete" ;;
        *) echo "$title" ;;  # Â§âÊèõ„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØ„Åù„ÅÆ„Åæ„Åæ
    esac
}

# Êó•Êú¨Ë™û„É°„ÉÉ„Çª„Éº„Ç∏„ÇíËã±Ë™û„Å´Â§âÊèõ„Åô„ÇãÈñ¢Êï∞
translate_message() {
    local message="$1"
    case "$message" in
        *"ÊàêÂäü„Åó„Åæ„Åó„Åü"*) echo "Completed successfully" ;;
        *"Â§±Êïó„Åó„Åæ„Åó„Åü"*) echo "Failed" ;;
        *"ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü"*) echo "Completed" ;;
        *"„Ç®„É©„Éº„ÅåÁô∫Áîü"*) echo "An error occurred" ;;
        *"Ê≠£Â∏∏„Å´"*) echo "Successfully" ;;
        *) echo "$message" ;;  # Â§âÊèõ„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØ„Åù„ÅÆ„Åæ„Åæ
    esac
}

# Ëá™ÂãïÁøªË®≥Ê©üËÉΩ‰ªò„ÅçÈÄöÁü•
notify_auto() {
    local title="${1:-Notification}"
    local message="${2:-}"
    
    # Êó•Êú¨Ë™û„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    if echo "$title$message" | grep -q '[„ÅÅ-„Çì„Ç°-„É∂„Éº‰∏Ä-Èæ†]'; then
        # Êó•Êú¨Ë™û„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØËã±Ë™û„Å´Â§âÊèõ
        title=$(translate_title "$title")
        message=$(translate_message "$message")
    fi
    
    notify "$title" "$message"
}

# „Ç≥„Éû„É≥„ÉâÂÆüË°åÂæå„Å´ÈÄöÁü•ÔºàÊîπËâØÁâàÔºâ
notify_after() {
    "$@"
    local exit_code=$?
    local cmd_name="$1"
    
    if [[ $exit_code -eq 0 ]]; then
        notify_success "$cmd_name" "completed successfully"
    else
        notify_error "$cmd_name" "failed with exit code: $exit_code"
    fi
    
    return $exit_code
}

# Èï∑ÊôÇÈñìÂÆüË°åÂæå„Å´ÈÄöÁü•
long_task_notify() {
    local start_time=$(date +%s)
    local cmd_name="$1"
    
    "$@"
    local exit_code=$?
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    # 10Áßí‰ª•‰∏ä„Åã„Åã„Å£„ÅüÂ†¥Âêà„ÅÆ„ÅøÈÄöÁü•
    if [[ $duration -gt 10 ]]; then
        local duration_str=""
        if [[ $duration -gt 3600 ]]; then
            duration_str="$((duration / 3600))ÊôÇÈñì$((duration % 3600 / 60))ÂàÜ"
        elif [[ $duration -gt 60 ]]; then
            duration_str="$((duration / 60))ÂàÜ$((duration % 60))Áßí"
        else
            duration_str="${duration}Áßí"
        fi
        
        if [[ $exit_code -eq 0 ]]; then
            notify_success "„Çø„Çπ„ÇØÂÆå‰∫Ü" "$cmd_name (ÂÆüË°åÊôÇÈñì: $duration_str)"
        else
            notify_error "„Çø„Çπ„ÇØÂ§±Êïó" "$cmd_name (ÂÆüË°åÊôÇÈñì: $duration_str)"
        fi
    fi
    
    return $exit_code
}

# „Éó„É≠„Ç∞„É¨„ÇπÈÄöÁü•ÔºàÈÄ≤Êçó„ÇíÂÆöÊúüÁöÑ„Å´ÈÄöÁü•Ôºâ
notify_progress() {
    local task_name="${1:-„Çø„Çπ„ÇØ}"
    local total="${2:-100}"
    local current="${3:-0}"
    
    local percentage=$((current * 100 / total))
    notify "üîÑ $task_name" "ÈÄ≤Êçó: $percentage% ($current/$total)"
}

# „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±
debug_info() {
    echo "=== WSL Notify Debug Info ==="
    echo "WSL_NOTIFY_SEND_EXE: ${WSL_NOTIFY_SEND_EXE:-Not set}"
    
    if [[ -n "$WSL_NOTIFY_SEND_EXE" ]]; then
        echo "Executable exists: $([[ -x "$WSL_NOTIFY_SEND_EXE" ]] && echo 'Yes' || echo 'No')"
        if [[ -x "$WSL_NOTIFY_SEND_EXE" ]]; then
            echo "File info: $(ls -la "$WSL_NOTIFY_SEND_EXE")"
        fi
    fi
    
    echo ""
    echo "WSL_DISTRO_NAME: ${WSL_DISTRO_NAME:-Not set}"
    echo ""
    echo "Finding wsl-notify-send.exe in Nix store:"
    find /nix/store -maxdepth 3 -name "wsl-notify-send.exe" -type f 2>/dev/null | head -5
}

# „ÉÜ„Çπ„ÉàÈñ¢Êï∞
test_notifications() {
    echo "Testing various notification types..."
    
    echo "1. Basic notification (single argument)"
    notify "Basic notification test."
    sleep 2
    
    echo "2. Title only"
    notify "Title only"
    sleep 2
    
    echo "3. Title with message"
    notify "Title" "This is a message."
    sleep 2
    
    echo "4. Direct exe call"
    "$WSL_NOTIFY_SEND_EXE" --category "NixOS" "Direct run test."
    sleep 2
    
    echo "5. Direct exe with newline"
    "$WSL_NOTIFY_SEND_EXE" --category "NixOS" "$(printf 'Title\nMessage')"
    sleep 2
    
    echo ""
    echo "All tests completed!"
}

# „É°„Ç§„É≥Âá¶ÁêÜ
if [[ "${BASH_SOURCE[0]}" == "${0}" ]] || [[ "${(%):-%N}" == "${0}" ]]; then
    case "${1:-}" in
        info|success|warning|error)
            cmd=$1
            shift
            notify_$cmd "$@"
            ;;
        after)
            shift
            notify_after "$@"
            ;;
        long)
            shift
            long_task_notify "$@"
            ;;
        progress)
            shift
            notify_progress "$@"
            ;;
        debug)
            debug_info
            ;;
        test)
            test_notifications
            ;;
        help)
            echo "Usage: $0 [command] [arguments]"
            echo ""
            echo "Commands:"
            echo "  (none)        Send a basic notification"
            echo "  info          Send info notification with ‚ÑπÔ∏è"
            echo "  success       Send success notification with ‚úÖ"
            echo "  warning       Send warning notification with ‚ö†Ô∏è"
            echo "  error         Send error notification with ‚ùå"
            echo "  after         Execute command and notify when done"
            echo "  long          Execute command and notify if it takes >10s"
            echo "  progress      Send progress notification"
            echo "  debug         Show debug information"
            echo "  test          Test all notification types"
            echo "  help          Show this help message"
            echo ""
            echo "Examples:"
            echo "  $0 '„Éì„É´„ÉâÂÆå‰∫Ü'"
            echo "  $0 success '„Éá„Éó„É≠„Ç§ÊàêÂäü' '„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Åå„Éá„Éó„É≠„Ç§„Åï„Çå„Åæ„Åó„Åü'"
            echo "  $0 after nix-build"
            echo "  $0 long make -j8"
            echo "  $0 progress '„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ' 100 45"
            ;;
        *)
            notify "$@"
            ;;
    esac
fi
